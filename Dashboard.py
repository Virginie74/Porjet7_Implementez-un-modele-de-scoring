# -*- coding: utf-8 -*-
"""
Created on Wed Oct  5 16:47:20 2022

@author: virgi
"""
import streamlit as st
import pandas as pd
import requests
import matplotlib.pyplot as plt
import joblib
from math import pi


#API_URL = 'http://127.0.0.1:8000/'
API_URL = 'https://app-myfastapi.herokuapp.com/'
LOGO_IMAGE = "logo.png"
IMAGE_SHAPE = ("summary_plot_shap.png")


#####################################################
#########################################
# Define specific functions
#########################################
def rename_columns(df):
    new_name_cols = {
        'CODE_GENDER': "Genre",
        'DAYS_BIRTH': "Age",
        'NAME_FAMILY_STATUS': "Situation familiale",
        'CNT_CHILDREN': "Nombre d'enfants",
        'NAME_EDUCATION_TYPE': "Niveau d'√©tude",
        'AMT_INCOME_TOTAL': "Revenu annuel",
        'NAME_CONTRACT_TYPE': "Type de cr√©dit demand√©",
        'AMT_CREDIT': "Montant du cr√©dit",
        'ANNUITY_INCOME_PERCENT': "Taux d'endettement estim√©",
        'AMT_ANNUITY': "Montant des annuit√©s",
        'OCCUPATION_TYPE': "Situation professionelle",
        'DAYS_EMPLOYED': "Anciennet√© dans l'entreprise",
        'NAME_INCOME_TYPE': "Type de revenu",
        'EXT_SOURCE_2': "Score du client d'apr√®s SOURCE 2",
        'EXT_SOURCE_3': "Score du client d'apr√®s SOURCE 3",
        'FLAG_OWN_CAR': "Propri√©taire d'un v√©hicle",
        'FLAG_OWN_REALTY': "Propri√©taire d'un logement principales",
        'CREDIT_TERM': "Dur√©e du cr√©dit",
        'DAYS_INSTALMENT_delay': "D√©lai de remboursement de cr√©dit pr√©c√©dent",
        'DAYS_INSTALMENT_delta': "Delta entre sommes percues et du de cr√©dit pr√©c√©dent",
        'SUM_OF_CURRENT_CREDIT': "Montant des cr√©dits en cours",
        'AMT_GOODS_PRICE': "Montant de l'achat",
        'NB_APPROVED_APP_previous': "Nb de demandes approuv√©es",
        'NB_REFUSED_APP_previous': "Nb de demandes refus√©es",
        'REGION_RATING_CLIENT_W_CITY': "Zone d'habitation (commune)",
        'NAME_EDUCATION_TYPE_Higher_education': "Niveau d'√©ducation universitaire",
        'AMT_REQ_CREDIT_BUREAU_QRT': "Nb de demandes de renseignements",
        'DAYS_LAST_PHONE_CHANGE': "Anciennet√© du t√©l√©phone (en jours)",
        'OCCUPATION_TYPE_Core_staff': "Activit√© professionnelle (Personnel cl√©)",
        'ORGANIZATION_TYPE_School': "Secteur professionel (√©cole)",
        'NB_CLOSED_CREDIT_bureau': "Nb de cr√©dits termin√©s",
        'NB_ACTIVE_CREDIT_bureau': "Nb de cr√©dits en cours"}
    df.rename(columns=new_name_cols, inplace=True)
    return df

############################################


@st.cache
def load_data():
    """Function to load the dataframe containing preprocessed data"""
    data = pd.read_csv("data_sampled.csv")
    data = data.dropna(axis=0)
    data = data.sample(n=10000)
    return data


@st.cache
def load_info_customer(customer_id):
    """Function to obtain the raw variables of a unique customer based on its id"""
    full_data = load_data()
    data_customer = full_data.loc[full_data["SK_ID_CURR"] == customer_id]
    return data_customer


@st.cache
def load_data_customer_prepared(customer_id):
    """Function to obtain the encoded and normalized data of a unique customer based on its id"""
    X_prepared_all = pd.read_csv("X_prepared_sampled.csv")
    X_prepared_id = X_prepared_all.loc[X_prepared_all["SK_ID_CURR"] == customer_id]

    return X_prepared_id


@st.cache
def get_prediction(customer_id):
    api_url = 'https://app-myfastapi.herokuapp.com/predict/' + str(customer_id)
    response = requests.get(url=api_url)
    API_data = response.json()
    print('API_DATA', API_data)
    return API_data


@st.cache
def get_neighbors(customer_id):
    api_url = "https://app-myfastapi.herokuapp.com/load_voisins/" + \
        str(customer_id)
    response = requests.get(url=api_url)
    API_knn = response.json()
    print('API_DATA', API_knn)
    return API_knn


@st.cache
def get_shap_values(X_prepared):
    explainer = joblib.load("shap_explainer.joblib")
    shap_values = explainer.shap_values(X_prepared)
    return shap_values


def main():
    """Main function to determine what is display on the dashboard"""

    ##################################################
    # SIDE BAR
    ###################################################

    with st.sidebar:
        st.image(LOGO_IMAGE)
        html_temp = """
                <p style="font-size: 20px; font-weight: bold; text-align:center">
                Page d'accueil</p>
                """
        st.markdown(html_temp, unsafe_allow_html=True)
        #st.xrite("Page d'accueil")

    ##################################################
    # HOME PAGE
    ###################################################

    html_temp = """
                <div style="background-color: gray; padding:10px; border-radius:10px">
                <h1 style="color: white; text-align:center">Bienvenue dans votre application</h1>
                <h1 style="color: white; text-align:center">Pr√™t √† d√©penser</h1>
                </div>
                <p style="font-size: 20px; font-weight: bold; text-align:center">
                Support de d√©cision cr√©dit √† destination des gestionnaires de la relation client</p>
                """
    st.markdown(html_temp, unsafe_allow_html=True)

    with st.expander(label="ü§î A quoi sert cette application ?"):
        st.write("Ce dashboard interactif de **Pr√™t √† d√©penser**\
                 permet de comprendre et interpr√©ter les d√©cisions d'octroi de pr√™t.\
                 Ces d√©cisions sont la r√©sultante d'une pr√©dictions faites\
                 par un mod√®le d'apprentissage √† partir des donn√©es de clients pr√©c√©dents")
        st.text('\n')
        st.write("**Objectif**:  r√©pondre au soucis de transparence vis-√†-vis\
                 des d√©cisions d‚Äôoctroi de cr√©dit qui va tout √† fait\
                 dans le sens des valeurs que l‚Äôentreprise veut incarner")

    with st.expander(label="ü§î Quels sont les donn√©es les plus importantes pour l'octroie d'un cr√©dit ?"):
        st.write("L'octroie d'un cr√©dit √† un client est dans un premier temps accord√©\
                  via l'utilisation d'un mod√®le de machine learning de type Light GBM")
        st.text('\n')
        st.write("Pour le mod√®le, les informations principales utilis√©es par le mod√®le sont repr√©sent√©es dans le graphique ci-dessous")
        st.image(IMAGE_SHAPE)


if __name__ == "__main__":
    main()

# to run in a terminal
# streamlit run dashboard.py
# or
# python -m streamlit run myfile.py
